"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var check_deployment_status_exports = {};
__export(check_deployment_status_exports, {
  checkDeploymentStatus: () => checkDeploymentStatus
});
module.exports = __toCommonJS(check_deployment_status_exports);
var import_sleep_promise = __toESM(require("sleep-promise"));
var import_utils = require("./utils");
var import_get_polling_delay = require("./utils/get-polling-delay");
var import_ready_state = require("./utils/ready-state");
var import_utils2 = require("./utils");
async function* checkDeploymentStatus(deployment, clientOptions) {
  const { token, teamId, apiUrl, userAgent } = clientOptions;
  const debug = (0, import_utils2.createDebug)(clientOptions.debug);
  let deploymentState = deployment;
  const apiDeployments = (0, import_utils.getApiDeploymentsUrl)();
  if ((0, import_ready_state.isDone)(deploymentState) && (0, import_ready_state.isAliasAssigned)(deploymentState)) {
    debug(
      `Deployment is already READY and aliases are assigned. Not running status checks`
    );
    return;
  }
  debug("Waiting for builds and the deployment to complete...");
  const finishedEvents = /* @__PURE__ */ new Set();
  const startTime = Date.now();
  while (true) {
    const deploymentData = await (0, import_utils.fetch)(
      `${apiDeployments}/${deployment.id || deployment.deploymentId}${teamId ? `?teamId=${teamId}` : ""}`,
      token,
      { apiUrl, userAgent, agent: clientOptions.agent }
    );
    const deploymentUpdate = await deploymentData.json();
    if (deploymentUpdate.error) {
      debug("Deployment status check has errorred");
      return yield { type: "error", payload: deploymentUpdate.error };
    }
    if (deploymentUpdate.readyState === "BUILDING" && !finishedEvents.has("building")) {
      debug("Deployment state changed to BUILDING");
      finishedEvents.add("building");
      yield { type: "building", payload: deploymentUpdate };
    }
    if (deploymentUpdate.readyState === "CANCELED" && !finishedEvents.has("canceled")) {
      debug("Deployment state changed to CANCELED");
      finishedEvents.add("canceled");
      yield { type: "canceled", payload: deploymentUpdate };
    }
    if ((0, import_ready_state.isReady)(deploymentUpdate) && !finishedEvents.has("ready")) {
      debug("Deployment state changed to READY");
      finishedEvents.add("ready");
      yield { type: "ready", payload: deploymentUpdate };
    }
    if (deploymentUpdate.checksState !== void 0) {
      if (deploymentUpdate.checksState === "completed" && !finishedEvents.has("checks-completed")) {
        finishedEvents.add("checks-completed");
        if (deploymentUpdate.checksConclusion === "succeeded") {
          yield {
            type: "checks-conclusion-succeeded",
            payload: deploymentUpdate
          };
        } else if (deploymentUpdate.checksConclusion === "failed") {
          yield { type: "checks-conclusion-failed", payload: deploymentUpdate };
        } else if (deploymentUpdate.checksConclusion === "skipped") {
          yield {
            type: "checks-conclusion-skipped",
            payload: deploymentUpdate
          };
        } else if (deploymentUpdate.checksConclusion === "canceled") {
          yield {
            type: "checks-conclusion-canceled",
            payload: deploymentUpdate
          };
        }
      }
      if (deploymentUpdate.checksState === "registered" && !finishedEvents.has("checks-registered")) {
        finishedEvents.add("checks-registered");
        yield { type: "checks-registered", payload: deploymentUpdate };
      }
      if (deploymentUpdate.checksState === "running" && !finishedEvents.has("checks-running")) {
        finishedEvents.add("checks-running");
        yield { type: "checks-running", payload: deploymentUpdate };
      }
    }
    if ((0, import_ready_state.isAliasAssigned)(deploymentUpdate)) {
      debug("Deployment alias assigned");
      return yield { type: "alias-assigned", payload: deploymentUpdate };
    }
    if ((0, import_ready_state.isAliasError)(deploymentUpdate)) {
      return yield { type: "error", payload: deploymentUpdate.aliasError };
    }
    if (deploymentUpdate.readyState === "ERROR" && deploymentUpdate.errorCode === "BUILD_FAILED") {
      return yield { type: "error", payload: deploymentUpdate };
    }
    if ((0, import_ready_state.isFailed)(deploymentUpdate)) {
      return yield {
        type: "error",
        payload: deploymentUpdate.error || deploymentUpdate
      };
    }
    const elapsed = Date.now() - startTime;
    const duration = (0, import_get_polling_delay.getPollingDelay)(elapsed);
    await (0, import_sleep_promise.default)(duration);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  checkDeploymentStatus
});
