"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var hashes_exports = {};
__export(hashes_exports, {
  hash: () => hash,
  hashes: () => hashes,
  mapToObject: () => mapToObject
});
module.exports = __toCommonJS(hashes_exports);
var import_crypto = require("crypto");
var import_fs_extra = __toESM(require("fs-extra"));
var import_async_sema = require("async-sema");
function hash(buf) {
  return (0, import_crypto.createHash)("sha1").update(buf).digest("hex");
}
const mapToObject = (map) => {
  const obj = {};
  for (const [key, value] of map) {
    if (typeof key === "undefined")
      continue;
    obj[key] = value;
  }
  return obj;
};
async function hashes(files, map = /* @__PURE__ */ new Map()) {
  const semaphore = new import_async_sema.Sema(100);
  await Promise.all(
    files.map(async (name) => {
      await semaphore.acquire();
      const stat = await import_fs_extra.default.lstat(name);
      const mode = stat.mode;
      let data;
      const isDirectory = stat.isDirectory();
      let h;
      if (!isDirectory) {
        if (stat.isSymbolicLink()) {
          const link = await import_fs_extra.default.readlink(name);
          data = Buffer.from(link, "utf8");
        } else {
          data = await import_fs_extra.default.readFile(name);
        }
        h = hash(data);
      }
      const entry = map.get(h);
      if (entry) {
        const names = new Set(entry.names);
        names.add(name);
        entry.names = [...names];
      } else {
        map.set(h, { names: [name], data, mode });
      }
      semaphore.release();
    })
  );
  return map;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  hash,
  hashes,
  mapToObject
});
